import LinkedList from '../exercise31'

describe('LinkedList with DoubleNode', () => {
  it('inserts double node at the begging of the list', () => {
    const list: LinkedList<string> = new LinkedList()
    list.insertAtTheBeginning('l')
    list.insertAtTheBeginning('e')
    list.insertAtTheBeginning('h')
    expect(list.firstNode?.value).toBe('h')
    expect(list.firstNode?.next?.value).toBe('e')
  })
  it('inserts double node at the begging of the list', () => {
    const list: LinkedList<string> = new LinkedList()
    list.insertAtTheEnd('h')
    list.insertAtTheEnd('e')
    list.insertAtTheEnd('l')
    expect(list.firstNode?.value).toBe('h')
    expect(list.firstNode?.next?.value).toBe('e')
    expect(list.firstNode?.next?.next?.value).toBe('l')
  })
  it('remove first node', () => {
    const list: LinkedList<string> = new LinkedList()
    list.insertAtTheEnd('h')
    list.insertAtTheEnd('e')
    list.insertAtTheEnd('l')
    list.removeFromTheBeginning()
    expect(list.firstNode?.value).toBe('e')
    expect(list.firstNode?.next?.value).toBe('l')
  })
  it('remove last node', () => {
    const list: LinkedList<string> = new LinkedList()
    list.insertAtTheEnd('h')
    list.insertAtTheEnd('e')
    list.insertAtTheEnd('l')
    list.removeFromTheEnd()
    expect(list.firstNode!.value).toBe('h')
    expect(list.firstNode!.next!.value).toBe('e')
    expect(list.firstNode!.next!.next).toBeNull()
  })
  it('inserts new node before given node', () => {
    const list: LinkedList<string> = new LinkedList()
    list.insertAtTheEnd('l')
    list.insertBefore('l', 'h')
    list.insertBefore('l', 'e')
    expect(list.firstNode!.value).toBe('h')
    expect(list.firstNode!.next!.value).toBe('e')
    expect(list.firstNode!.next!.next!.value).toBe('l')
  })
  it('inserts new node after given node', () => {
    const list: LinkedList<string> = new LinkedList()
    list.insertAtTheEnd('h')
    list.insertAtTheEnd('l')
    list.insertAfter('h', 'e')
    expect(list.firstNode!.value).toBe('h')
    expect(list.firstNode!.next!.value).toBe('e')
    expect(list.firstNode!.next!.next!.value).toBe('l')
    expect(list.firstNode!.next!.next!.prev!.value).toBe('e')
  })
  it('removes given node', () => {
    const list: LinkedList<string> = new LinkedList()
    list.insertAtTheEnd('h')
    list.insertAtTheEnd('e')
    list.insertAtTheEnd('l')
    list.insertAtTheEnd('p')
    list.remove('h')
    list.remove('l')
    expect(list.firstNode!.value).toBe('e')
    expect(list.firstNode!.next!.value).toBe('p')
  })
})
